from client.http_client.config.config_client import get_config
from client.http_client.logger.logger_client import get_logger

import requests
from PyQt5 import uic
from PyQt5.QtCore import Qt
from datetime import datetime
from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtWidgets import QDialog, QMessageBox

config = get_config("client/http_client/config/config.ini")
logger = get_logger("client", config["logger"]["LOGGER_CONFIG_PATH"])


class TasksWindow(QDialog):
    def __init__(self, token, project_id):
        super().__init__()
        self.token = token
        self.project_id = project_id
        self.project_name = None
        self.user_id = None
        self.user_role = None
        self.task_description = None
        self.headers = {"Authorization": f"Bearer {self.token}"}

        uic.loadUi('client/http_client/ui/main/tasks/Tasks.ui', self)

        with open('client/http_client/ui/styles/tasks.qss', 'r') as f:
            self.setStyleSheet(f.read())
            logger.debug("Tasks window styles loaded")

        self.init_ui()
        self.load_user_data()

        if self.user_role == "developer":
            self.pushButton_reassign_task.setEnabled(False)
            self.pushButton_reassign_task.setVisible(False)

            self.pushButton_delete_task.setEnabled(False)
            self.pushButton_delete_task.setVisible(False)

        self.pushButton_exit.clicked.connect(self.close)
        self.pushButton_apply_filters.clicked.connect(self.apply_filters)
        self.pushButton_reset_filters.clicked.connect(self.reset_filters)
        self.pushButton_read_task.clicked.connect(self.read_task)
        self.pushButton_update_status_task.clicked.connect(self.update_status_task)
        self.pushButton_reassign_task.clicked.connect(self.reassign_task)
        self.pushButton_delete_task.clicked.connect(self.delete_task)
        self.tableView_tasks.selectionModel().selectionChanged.connect(self.on_task_selected)

        self.tableView_tasks_history.horizontalHeader().setSectionResizeMode(0, QtWidgets.QHeaderView.ResizeToContents)
        self.tableView_tasks_history.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.ResizeToContents)
        self.tableView_tasks_history.horizontalHeader().setSectionResizeMode(2, QtWidgets.QHeaderView.Stretch)
        self.tableView_tasks_history.horizontalHeader().setSectionResizeMode(3, QtWidgets.QHeaderView.Stretch)

        self.groupBox_task_history.setVisible(False)
        self.label_task_description.setVisible(False)

        self.apply_filters()

    def init_ui(self):
        url_project = config["URLS"]["get_project_by_id"].replace("{project_id}", str(self.project_id))

        try:
            response = requests.get(url_project, headers=self.headers)

            if response.status_code == 200:
                project = response.json()
                self.project_name = project["name"]

        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ –ø—Ä–æ–µ–∫—Ç—É: {str(e)}")

        self.label_current_project.setText(f"–ó–∞–¥–∞—á–∏ –ø–æ –ø—Ä–æ–µ–∫—Ç—É: {self.project_name} ")
        self.tasks_model = QtGui.QStandardItemModel()
        self.tasks_model.setHorizontalHeaderLabels(["ID", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å", "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç", "–î–µ–¥–ª–∞–π–Ω", "–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫"])
        self.tableView_tasks.setModel(self.tasks_model)
        self.tableView_tasks.setColumnHidden(0, True)
        self.tableView_tasks.setSelectionBehavior(QtWidgets.QAbstractItemView.SelectRows)
        self.tableView_tasks.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)

        self.history_model = QtGui.QStandardItemModel()
        self.history_model.setHorizontalHeaderLabels(["–î–∞—Ç–∞", "–ü–æ–ª–µ", "–°—Ç–∞—Ä–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ", "–ù–æ–≤–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ"])
        self.tableView_tasks_history.setModel(self.history_model)
        self.tableView_tasks_history.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)

        self.comboBox.addItem("–í—Å–µ —Å—Ç–∞—Ç—É—Å—ã", "")
        self.comboBox.addItem("–û—Ç–∫—Ä—ã—Ç–∞", "open")
        self.comboBox.addItem("–í —Ä–∞–±–æ—Ç–µ", "in_progress")
        self.comboBox.addItem("–ì–æ—Ç–æ–≤–∞", "done")
        self.comboBox.addItem("–ó–∞–∫—Ä—ã—Ç–∞", "closed")

    def load_user_data(self):
        try:
            response = requests.get(config["URLS"]["current_user"], headers=self.headers)

            if response.status_code == 200:
                user_data = response.json()
                self.user_id = user_data["id"]
                self.user_role = user_data["role"]

        except Exception as e:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {str(e)}")

    def get_priority_text(self, priority_value):
        try:
            priority = float(priority_value)
            if priority <= 0.35:
                return "–Ω–∏–∑–∫–∏–π üü¢"
            elif 0.35 < priority <= 0.75:
                return "—Å—Ä–µ–¥–Ω–∏–π üü°"
            elif 0.75 < priority <= 0.99:
                return "–≤—ã—Å–æ–∫–∏–π üî¥"
            return "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"
        except:
            return "–Ω–µ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω"

    def get_status_text(self, status):
        status_map = {
            "open": "–û—Ç–∫—Ä—ã—Ç–∞",
            "in_progress": "–í —Ä–∞–±–æ—Ç–µ",
            "done": "–ì–æ—Ç–æ–≤–∞",
            "closed": "–ó–∞–∫—Ä—ã—Ç–∞"
        }
        return status_map.get(status, status)

    def format_datetime(self, datetime_str):
        try:
            if not datetime_str:
                return ""

            datetime_str = datetime_str.rstrip("Z")

            for fmt in ("%Y-%m-%dT%H:%M:%S", "%Y-%m-%dT%H:%M:%S.%f"):
                try:
                    dt = datetime.strptime(datetime_str, fmt)
                    return dt.strftime("%d.%m.%Y %H:%M")
                except ValueError:
                    continue

            return datetime_str
        except Exception as e:
            return datetime_str

    def apply_filters(self):
        search_text = self.lineEdit.text().strip().lower()
        status_filter = self.comboBox.currentData()

        try:
            params = {"creator_id": self.user_id, "project_id": self.project_id}

            if status_filter:
                params["status"] = status_filter

            response = requests.get(config["URLS"]["get_tasks"], headers=self.headers, params=params)
            response.raise_for_status()

            self.tasks_model.setRowCount(0)

            tasks = response.json()

            if not tasks:
                self.tableView_tasks.setVisible(False)
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–£ –≤–∞—Å –Ω–µ—Ç –∑–∞–¥–∞—á —Å –≤—ã–±—Ä–∞–Ω–Ω—ã–º–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏!")
                return

            for task in tasks:
                if search_text:
                    task_text = (
                            task["title"].lower() +
                            self.get_status_text(task["status"]).lower() +
                            self.get_priority_text(task.get("priority")).lower() +
                            self.format_datetime(task.get("deadline")).lower() +
                            task.get("assignee", {}).get("full_name", "").lower() +
                            task.get("assignee", {}).get("username", "").lower()
                    )
                    if search_text not in task_text:
                        continue

                row = self.tasks_model.rowCount()
                self.tasks_model.insertRow(row)

                assignee = task.get("assignee", {})
                assignee_name = assignee.get("full_name", assignee.get("username", "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"))
                deadline = self.format_datetime(task["deadline"])

                self.tasks_model.setItem(row, 0, QtGui.QStandardItem(str(task["id"])))
                self.tasks_model.setItem(row, 1, QtGui.QStandardItem(task["title"]))
                self.tasks_model.setItem(row, 2, QtGui.QStandardItem(self.get_status_text(task["status"])))
                self.tasks_model.setItem(row, 3, QtGui.QStandardItem(self.get_priority_text(task.get("priority"))))
                self.tasks_model.setItem(row, 4, QtGui.QStandardItem(deadline))
                self.tasks_model.setItem(row, 5, QtGui.QStandardItem(assignee_name))

            self.tableView_tasks.resizeColumnsToContents()
            self.tableView_tasks.horizontalHeader().setSectionResizeMode(1, QtWidgets.QHeaderView.Stretch)
            self.tableView_tasks.setVisible(True)

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∑–∞–¥–∞—á–∏: {str(e)}")

    def load_task_history(self, task_id):
        try:
            url = config["URLS"]["task_history"].replace("{task_id}", str(task_id))
            response = requests.get(url, headers=self.headers)

            if response.status_code == 404:
                self.groupBox_task_history.setVisible(False)
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–≠—Ç–∞ –∑–∞–¥–∞—á–∞ –µ—â–µ –Ω–µ –∏–º–µ–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π!")
                return

            response.raise_for_status()
            history_data = response.json()
            self.history_model.setRowCount(0)

            if not history_data:
                self.groupBox_task_history.setVisible(False)
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –∑–∞–¥–∞—á–∏ –ø—É—Å—Ç–∞")
                return

            self.groupBox_task_history.setVisible(True)

            url = config["URLS"]["get_task_by_id"].replace("{task_id}", str(task_id))
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            task = response.json()
            self.task_description = task["description"]

            self.label_task_description.setVisible(True)
            self.label_task_description.setText(f"–û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏: {self.task_description}")

            for record in history_data:
                row = self.history_model.rowCount()
                self.history_model.insertRow(row)
                changed_at = self.format_datetime(record["changed_at"])

                field_name = self.get_field_name(record["changed_field"])
                old_value = self.format_field_value(record["changed_field"], record["old_value"])
                new_value = self.format_field_value(record["changed_field"], record["new_value"])

                self.history_model.setItem(row, 0, QtGui.QStandardItem(changed_at))
                self.history_model.setItem(row, 1, QtGui.QStandardItem(field_name))
                self.history_model.setItem(row, 2, QtGui.QStandardItem(old_value))
                self.history_model.setItem(row, 3, QtGui.QStandardItem(new_value))

        except requests.exceptions.HTTPError as e:
            if e.response.status_code == 404:
                self.groupBox_task_history.setVisible(False)
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è", "–ò—Å—Ç–æ—Ä–∏—è –∏–∑–º–µ–Ω–µ–Ω–∏–π –¥–ª—è —ç—Ç–æ–π –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
            else:
                self.groupBox_task_history.setVisible(False)
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}")

        except Exception as e:
            self.groupBox_task_history.setVisible(False)
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é: {str(e)}")

    def get_field_name(self, field):
        field_names = {
            "assigned_to": "–ù–∞–∑–Ω–∞—á–µ–Ω–∞ –Ω–∞",
            "status": "–°—Ç–∞—Ç—É—Å",
            "created": "–ó–∞–¥–∞—á–∞",
            "title": "–ù–∞–∑–≤–∞–Ω–∏–µ",
            "description": "–û–ø–∏—Å–∞–Ω–∏–µ",
            "deadline": "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è",
            "priority": "–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç",
            "task_created": "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞"
        }
        return field_names.get(field, field)

    def format_field_value(self, field, value):
        if value is None:
            return "–ü–æ–ª–µ –Ω–µ –∏–∑–º–µ–Ω—è–ª–æ—Å—å"

        if value == "task_created":
            return "–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞"

        if field == "assigned_to":
            return self.get_developer_name(value)
        elif field == "status":
            return self.get_status_text(value)
        elif field == "created":
            return self.format_datetime(value) if value else "–ù–µ –∑–∞–¥–∞–Ω–æ"

        return str(value)

    def get_developer_name(self, developer_id):
        if not developer_id:
            return "–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"

        try:
            url = config["URLS"]["get_user_by_id"].replace("{user_id}", str(developer_id))
            response = requests.get(url, headers=self.headers)

            if response.status_code == 200:
                developer = response.json()
                return developer["username"]
        except:
            pass

        return str(developer_id)

    def on_task_selected(self, selected):
        if selected.indexes():
            selected_row = selected.indexes()[0].row()
            task_id = self.tasks_model.item(selected_row, 0).text()
            self.load_task_history(task_id)

    def reset_filters(self):
        self.comboBox.setCurrentIndex(0)
        self.lineEdit.clear()
        self.apply_filters()
        self.groupBox_task_history.setVisible(False)
        self.label_task_description.setVisible(False)

    def read_task(self):
        selected = self.tableView_tasks.selectionModel().selectedRows()
        if not selected:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞")
            return

        task_id = self.tasks_model.item(selected[0].row(), 0).text()

        try:
            url = config["URLS"]["get_task_by_id"].replace("{task_id}", str(task_id))
            response = requests.get(url, headers=self.headers)
            response.raise_for_status()
            task = response.json()
            self.task_description = task["description"]

            info_dialog = QtWidgets.QDialog(self)
            info_dialog.setWindowTitle(f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–¥–∞—á–µ")
            info_dialog.setMinimumSize(450, 350)

            layout = QtWidgets.QVBoxLayout(info_dialog)
            layout.setContentsMargins(15, 15, 15, 15)

            form_layout = QtWidgets.QFormLayout()
            form_layout.setVerticalSpacing(10)

            form_layout.addRow("–ù–∞–∑–≤–∞–Ω–∏–µ:", QtWidgets.QLabel(task['title']))
            form_layout.addRow("–û–ø–∏—Å–∞–Ω–∏–µ:", QtWidgets.QLabel(task.get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')))
            form_layout.addRow("–°—Ç–∞—Ç—É—Å:", QtWidgets.QLabel(self.get_status_text(task['status'])))
            form_layout.addRow("–ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç:", QtWidgets.QLabel(self.get_priority_text(task.get('priority'))))
            form_layout.addRow("–î–µ–¥–ª–∞–π–Ω:", QtWidgets.QLabel(self.format_datetime(task.get('deadline'))))
            form_layout.addRow("–ü—Ä–æ–µ–∫—Ç:", QtWidgets.QLabel(task['project']['name']))

            creator_name = task['creator'].get('full_name', task['creator']['username'])
            form_layout.addRow("–°–æ–∑–¥–∞—Ç–µ–ª—å:", QtWidgets.QLabel(creator_name))

            if task.get('assignee'):
                assignee_name = task['assignee'].get('full_name', task['assignee']['username'])
                form_layout.addRow("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:", QtWidgets.QLabel(assignee_name))
            else:
                form_layout.addRow("–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:", QtWidgets.QLabel("–ù–µ –Ω–∞–∑–Ω–∞—á–µ–Ω"))

            layout.addLayout(form_layout)

            close_btn = QtWidgets.QPushButton("–ó–∞–∫—Ä—ã—Ç—å")
            close_btn.clicked.connect(info_dialog.close)
            layout.addWidget(close_btn, alignment=QtCore.Qt.AlignRight)

            info_dialog.setStyleSheet("""
                QDialog {
                    background-color: #f4f6f8;
                }
                QLabel {
                    color: #3c4043;
                    font-size: 14px;
                }
                QPushButton {
                    background-color: #4285f4;
                    color: #ffffff;
                    font-size: 14px;
                    font-weight: bold;
                    border-radius: 8px;
                    padding: 6px 12px;
                    border: none;
                    min-width: 100px;
                    min-height: 30px;
                }
                QPushButton:hover {
                    background-color: #357ae8;
                }
            """)

            info_dialog.exec_()

        except Exception as e:
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–¥–∞—á–µ: {str(e)}")

    def update_status_task(self):
        selected = self.tableView_tasks.selectionModel().selectedRows()
        if not selected:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞")
            return

        try:
            task_id = self.tasks_model.item(selected[0].row(), 0).text()
            current_status_display = self.tasks_model.item(selected[0].row(), 2).text()

            status_mapping_reverse = {
                "–û—Ç–∫—Ä—ã—Ç–∞": "open",
                "–í —Ä–∞–±–æ—Ç–µ": "in_progress",
                "–ì–æ—Ç–æ–≤–∞": "done",
                "–ó–∞–∫—Ä—ã—Ç–∞": "closed"
            }
            current_status = status_mapping_reverse.get(current_status_display)

            if current_status is None:
                raise ValueError("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏")

            valid_transactions_for_dev = {
                'open': ['in_progress'],
                'in_progress': ['done'],
            }

            valid_transitions = {
                'open': ['in_progress'],
                'in_progress': ['done'],
                'done': ['closed'],
                'closed': ['open']
            }

            if self.user_role == "team_lead":
                allowed_statuses = valid_transitions.get(current_status, [])
            else:
                allowed_statuses = valid_transactions_for_dev.get(current_status, [])

            if not allowed_statuses:
                QMessageBox.information(self, "–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è",
                                        f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –ø–µ—Ä–µ—Ö–æ–¥–æ–≤ –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ —Å—Ç–∞—Ç—É—Å–∞ '{current_status_display}'")
                return

            dialog = QtWidgets.QDialog(self)
            dialog.setWindowTitle("–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –∑–∞–¥–∞—á–∏")
            dialog.setMinimumWidth(360)

            layout = QtWidgets.QVBoxLayout(dialog)

            current_status_label = QtWidgets.QLabel(f"<b>–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å:</b> {current_status_display}")
            layout.addWidget(current_status_label)
            current_status_label.setAlignment(QtCore.Qt.AlignCenter)

            status_combo = QtWidgets.QComboBox()
            for status in allowed_statuses:
                status_combo.addItem(self.get_status_text(status), status)
            status_combo.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)

            form_layout = QtWidgets.QFormLayout()
            form_layout.setLabelAlignment(Qt.AlignRight)
            form_layout.addRow("–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å:", status_combo)
            layout.addLayout(form_layout)

            button_layout = QtWidgets.QHBoxLayout()
            button_layout.addStretch()

            apply_button = QtWidgets.QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")
            apply_button.setObjectName("pushButton_apply")
            apply_button.clicked.connect(dialog.accept)

            cancel_button = QtWidgets.QPushButton("–û—Ç–º–µ–Ω–∏—Ç—å")
            cancel_button.setObjectName("pushButton_cancel")
            cancel_button.clicked.connect(dialog.reject)

            button_layout.addWidget(cancel_button)
            button_layout.addWidget(apply_button)

            layout.addLayout(button_layout)

            dialog.setStyleSheet("""
                QDialog {
                    background-color: #f4f6f8;
                    padding: 10px;
                }
                QLabel {
                    font-size: 13px;
                    margin-bottom: 6px;
                }
                QComboBox {
                    background-color: #ffffff;
                    border: 1px solid #d0d5d8;
                    border-radius: 8px;
                    padding: 6px 12px;
                    font-size: 14px;
                    color: #202124;
                    min-height: 25px;
                }
                QPushButton#pushButton_apply {
                    background-color: #34a853;
                    color: #ffffff;
                    font-size: 13px;
                    font-weight: bold;
                    border-radius: 8px;
                    padding: 6px 16px;
                    border: none;
                    min-width: 100px;
                }
                QPushButton#pushButton_cancel {
                    background-color: #ea4335;
                    color: #ffffff;
                    font-size: 13px;
                    font-weight: bold;
                    border-radius: 8px;
                    padding: 6px 16px;
                    border: none;
                    min-width: 100px;
                }
            """)

            if dialog.exec_() == QtWidgets.QDialog.Accepted:
                new_status = status_combo.currentData()
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} —Å '{current_status}' –Ω–∞ '{new_status}'")

                url = config["URLS"]["update_task_status"].replace("{task_id}", str(task_id))
                response = requests.patch(url, headers=self.headers, json={"status": new_status})

                if response.status_code == 200:
                    logger.info(f"–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ {task_id} —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '{new_status}'")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–°—Ç–∞—Ç—É—Å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    self.apply_filters()
                else:
                    error_msg = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logger.error(f"–û—à–∏–±–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞: {error_msg}")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å: {error_msg}")

        except requests.exceptions.RequestException as e:
            error_msg = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {error_msg}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {error_msg}")

        except Exception as e:
            error_msg = str(e)
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞: {error_msg}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}")

    def reassign_task(self):
        selected = self.tableView_tasks.selectionModel().selectedRows()
        if not selected:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
            return

        try:
            task_id = self.tasks_model.item(selected[0].row(), 0).text()

            url = config["URLS"]["get_users"]
            response = requests.get(url,headers=self.headers,params={"role": "developer"})
            response.raise_for_status()
            developers = response.json()

            if not developers:
                QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –¥–ª—è –Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è")
                return

            dialog = QtWidgets.QDialog(self)
            dialog.setWindowTitle("–ü–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏")
            dialog.setMinimumWidth(350)

            layout = QtWidgets.QVBoxLayout(dialog)
            grid_layout = QtWidgets.QGridLayout()

            current_assignee = self.tasks_model.item(selected[0].row(), 5).text()
            label_current = QtWidgets.QLabel("–¢–µ–∫—É—â–∏–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:")
            value_current = QtWidgets.QLabel(current_assignee)
            grid_layout.addWidget(label_current, 0, 0)
            grid_layout.addWidget(value_current, 0, 1)

            label_new = QtWidgets.QLabel("–ù–æ–≤—ã–π –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å:")
            developer_combo = QtWidgets.QComboBox()
            developer_combo.setSizeAdjustPolicy(QtWidgets.QComboBox.AdjustToContents)
            for dev in developers:
                display_name = dev.get('full_name', dev['username'])
                developer_combo.addItem(display_name, dev['id'])
            grid_layout.addWidget(label_new, 1, 0)
            grid_layout.addWidget(developer_combo, 1, 1)

            layout.addLayout(grid_layout)

            button_layout = QtWidgets.QHBoxLayout()
            button_layout.addStretch()

            button_cancel = QtWidgets.QPushButton("–û—Ç–º–µ–Ω–∏—Ç—å")
            button_cancel.setObjectName("pushButton_cancel")
            button_cancel.clicked.connect(dialog.reject)

            button_apply = QtWidgets.QPushButton("–ü—Ä–∏–º–µ–Ω–∏—Ç—å")
            button_apply.setObjectName("pushButton_apply")
            button_apply.clicked.connect(dialog.accept)

            button_layout.addWidget(button_cancel)
            button_layout.addWidget(button_apply)
            layout.addLayout(button_layout)

            dialog.setStyleSheet("""
                QDialog {
                    background-color: #f4f6f8;
                    padding: 10px;
                }
                QLabel {
                    font-size: 13px;
                    margin-bottom: 5px;
                }
                QComboBox {
                    background-color: #ffffff;
                    border: 1px solid #d0d5d8;
                    border-radius: 8px;
                    padding: 6px 12px;
                    font-size: 14px;
                    color: #202124;
                    min-height: 25px;
                }
                QPushButton#pushButton_apply {
                    background-color: #34a853;
                    color: #ffffff;
                    font-size: 13px;
                    font-weight: bold;
                    border-radius: 8px;
                    padding: 6px 16px;
                    border: none;
                    min-width: 100px;
                }
                QPushButton#pushButton_cancel {
                    background-color: #ea4335;
                    color: #ffffff;
                    font-size: 13px;
                    font-weight: bold;
                    border-radius: 8px;
                    padding: 6px 16px;
                    border: none;
                    min-width: 100px;
                }
            """)

            if dialog.exec_() == QtWidgets.QDialog.Accepted:
                new_assignee_id = developer_combo.currentData()

                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É {task_id} –Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {new_assignee_id}")

                url = config["URLS"]["reassign_task"].replace("{task_id}", str(task_id))
                response = requests.patch(
                    url,
                    headers=self.headers,
                    json={"new_assignee_id": new_assignee_id}
                )

                if response.status_code == 200:
                    logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∞")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ò—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—å –∑–∞–¥–∞—á–∏ –æ–±–Ω–æ–≤–ª–µ–Ω")
                    self.apply_filters()
                else:
                    error_msg = response.json().get("detail", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logger.error(f"–û—à–∏–±–∫–∞ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏—è: {error_msg}")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞–¥–∞—á—É: {error_msg}")

        except requests.exceptions.RequestException as e:
            error_msg = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏: {error_msg}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {error_msg}")

        except Exception as e:
            error_msg = str(e)
            logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ–Ω–∞–∑–Ω–∞—á–µ–Ω–∏–∏: {error_msg}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {error_msg}")

    def delete_task(self):
        selected = self.tableView_tasks.selectionModel().selectedRows()
        if not selected:
            QMessageBox.warning(self, "–û—à–∏–±–∫–∞", "–í—ã–±–µ—Ä–∏—Ç–µ –∑–∞–¥–∞—á—É –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è")
            return

        try:
            task_id = self.tasks_model.item(selected[0].row(), 0).text()
            task_title = self.tasks_model.item(selected[0].row(), 1).text()

            dialog = QtWidgets.QDialog(self)
            dialog.setWindowTitle("–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è")
            dialog.setMinimumWidth(400)

            layout = QtWidgets.QVBoxLayout(dialog)

            label = QtWidgets.QLabel(f'–í—ã —Ç–æ—á–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É "<b>{task_title}</b>" (ID: {task_id})?')
            label.setWordWrap(True)
            layout.addWidget(label)

            button_box = QtWidgets.QHBoxLayout()

            btn_cancel = QtWidgets.QPushButton("–û—Ç–º–µ–Ω–∏—Ç—å")
            btn_cancel.setObjectName("pushButton_cancel")
            btn_cancel.clicked.connect(dialog.reject)
            button_box.addWidget(btn_cancel)

            btn_apply = QtWidgets.QPushButton("–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å")
            btn_apply.setObjectName("pushButton_apply")
            btn_apply.clicked.connect(dialog.accept)
            button_box.addWidget(btn_apply)

            layout.addLayout(button_box)

            dialog.setStyleSheet("""
                QDialog {
                    background-color: #f4f6f8;
                    padding: 10px;
                }
                QLabel {
                    font-size: 13px;
                    margin-bottom: 5px;
                }
                QPushButton#pushButton_apply {
                    background-color: #34a853;
                    color: #ffffff;
                    font-size: 13px;
                    font-weight: bold;
                    border-radius: 8px;
                    padding: 6px 16px;
                    border: none;
                    min-width: 100px;
                }
                QPushButton#pushButton_cancel {
                    background-color: #ea4335;
                    color: #ffffff;
                    font-size: 13px;
                    font-weight: bold;
                    border-radius: 8px;
                    padding: 6px 16px;
                    border: none;
                    min-width: 100px;
                }
            """)

            if dialog.exec_() == QtWidgets.QDialog.Accepted:
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –∑–∞–¥–∞—á–∏ {task_id}")

                url = config["URLS"]["delete_task"].replace("{task_id}", str(task_id))
                response = requests.delete(url, headers=self.headers, json={"task_id": int(task_id)})

                if response.status_code == 200:
                    logger.info(f"–ó–∞–¥–∞—á–∞ {task_id} —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                    QMessageBox.information(self, "–£—Å–ø–µ—Ö", "–ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞")
                    self.apply_filters()
                else:
                    error_msg = response.json().get("message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
                    logger.error(f"–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {error_msg}")
                    QMessageBox.critical(self, "–û—à–∏–±–∫–∞", f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –∑–∞–¥–∞—á—É: {error_msg}")

            else:
                logger.info(f"–£–¥–∞–ª–µ–Ω–∏–µ –∑–∞–¥–∞—á–∏ {task_id} –æ—Ç–º–µ–Ω–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")

        except requests.exceptions.RequestException as e:
            error_msg = str(e)
            logger.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏: {error_msg}")
            QMessageBox.critical(self, "–û—à–∏–±–∫–∞ —Å–µ—Ç–∏", f"–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º: {error_msg}")


